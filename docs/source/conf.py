# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
# import os
# import sys
# sys.path.insert(0, os.path.abspath('.'))
import sphinx_rtd_theme

# -- Project information -----------------------------------------------------


project = u'mmdeeplearning'
copyright = u'2019, babymm'
author = u'babymm'
# THEME_TOPIC = "sphinx_rtd_theme"
THEME_TOPIC = "sphinx_materialdesign_theme"
# THEME_TOPIC = "mxtheme"

# The short X.Y version
version = u''
# The full version, including alpha/beta/rc tags
release = u'0.0.1'

# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.doctest',
    'sphinx.ext.intersphinx',
    'sphinx.ext.todo',
    'sphinx.ext.coverage',
    'sphinx.ext.mathjax',
    'sphinx.ext.ifconfig',
    'sphinx.ext.viewcode',
    'sphinx.ext.githubpages',
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = u'zh_CN'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = []

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = None

# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
# html_theme = 'alabaster'
html_favicon = 'icon.png'

if THEME_TOPIC == "babymm":
    html_theme_path = ['./themes']
    html_theme = 'babymm'

elif THEME_TOPIC == "sphinx_rtd_theme":
    html_theme = 'sphinx_rtd_theme'
    html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]
    html_theme_options = {
        'analytics_id': 'UA-XXXXXXX-1',
        'logo_only': True,
        'display_version': True,
        'prev_next_buttons_location': 'bottom',
        'style_external_links': False,
        # 'style_nav_header_background': 'white',
        'collapse_navigation': True,
        'sticky_navigation': True,
        'navigation_depth': 4,
        'includehidden': True,
        'titles_only': False
    }
    html_css_files = [
        'css/custom.css',
    ]
elif THEME_TOPIC == "alabaster":
    html_theme = 'alabaster'
elif THEME_TOPIC == "classic":
    html_theme = 'classic'
elif THEME_TOPIC == "sphinxdoc":
    html_theme = 'sphinxdoc'
elif THEME_TOPIC == "scrolls":
    html_theme = 'scrolls'
elif THEME_TOPIC == "agogo":
    html_theme = 'agogo'
elif THEME_TOPIC == "traditional":
    html_theme = 'traditional'
elif THEME_TOPIC == "nature":
    html_theme = 'nature'
elif THEME_TOPIC == "haiku":
    html_theme = 'haiku'
elif THEME_TOPIC == "pyramid":
    html_theme = 'pyramid'
elif THEME_TOPIC == "bizstyle":
    html_theme = 'bizstyle'
elif THEME_TOPIC == 'sphinx_materialdesign_theme':
    html_theme = 'sphinx_materialdesign_theme'
    html_theme_options = {
        'header_links': [
            ('Home', 'index', False, 'home'),
            ("深度学习", "https://zh.d2l.ai/", True, 'launch'),
            ("PDF", "https://buildmedia.readthedocs.org/media/pdf/mmdeeplearning/latest/mmdeeplearning.pdf", True, ''),
            ("GitHub", "https://github.com/mumupy/mmdeeplearning", True, 'link')
        ],

        # Customize css colors.
        # For details see link.
        # https://getmdl.io/customize/index.html
        #
        # Values: amber, blue, brown, cyan deep_orange, deep_purple, green, grey, indigo, light_blue,
        #         light_green, lime, orange, pink, purple, red, teal, yellow(Default: indigo)
        'primary_color': 'indigo',
        # Values: Same as primary_color. (Default: pink)
        'accent_color': 'pink',

        # Customize layout.
        # For details see link.
        # https://getmdl.io/components/index.html#layout-section
        'fixed_drawer': True,
        'fixed_header': True,
        'header_waterfall': True,
        'header_scroll': False,

        # Render title in header.
        # Values: True, False (Default: False)
        'show_header_title': False,
        # Render title in drawer.
        # Values: True, False (Default: True)
        'show_drawer_title': True,
        # Render footer.
        # Values: True, False (Default: True)
        'show_footer': True
    }
elif THEME_TOPIC == 'mxtheme':
    html_theme_path = ['mxtheme']
    html_theme = 'mxtheme'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}


# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'mmdeeplearningdoc'

# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # 'papersize' : 'a4paper',
    'utf8extra': '',
    'inputenc': '',
    'babel': r'''\usepackage[english]{babel}''',
    'preamble': r'''
\usepackage{ctex}
\setmainfont{Source Serif Pro}
\setsansfont{Source Sans Pro}
\setmonofont{Source Code Pro}
\setCJKmainfont[BoldFont=Source Han Serif SC SemiBold]{Source Han Serif SC}
\setCJKsansfont[BoldFont=Source Han Sans SC Medium]{Source Han Sans SC Normal}
\setCJKmonofont{Source Han Sans SC Normal}
\addto\captionsenglish{\renewcommand{\chaptername}{}}
\addto\captionsenglish{\renewcommand{\contentsname}{目录}}
\usepackage[draft]{minted}
\fvset{breaklines=true, breakanywhere=true}
\setlength{\headheight}{13.6pt}
\makeatletter
    \fancypagestyle{normal}{
        \fancyhf{}
        \fancyfoot[LE,RO]{{\py@HeaderFamily\thepage}}
        \fancyfoot[LO]{{\py@HeaderFamily\nouppercase{\rightmark}}}
        \fancyfoot[RE]{{\py@HeaderFamily\nouppercase{\leftmark}}}
        \fancyhead[LE,RO]{{\py@HeaderFamily }}
     }
\makeatother
\CJKsetecglue{}
\usepackage{zhnumber}
''',
    # The paper size ('letterpaper' or 'a4paper').
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    # 'preamble': '',

    # Latex figure (float) alignment
    # 'figure_align': 'htbp',
    'figure_align': 'H',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'mmdeeplearning.tex', u'mmdeeplearning 深度学习',
     u'babymm', 'manual'),
]

latex_use_parts = True

# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'mmdeeplearning', u'mmdeeplearning 深度学习',
     [author], 1)
]

# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'mmdeeplearning', u'mmdeeplearning 深度学习',
     author, 'mmdeeplearning', 'mmdeeplearning是对深度学习的各种框架进行学习的demo项目',
     'Miscellaneous'),
]

# -- Options for Epub output -------------------------------------------------

# Bibliographic Dublin Core info.
epub_title = project

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#
# epub_identifier = ''

# A unique identification for the text.
#
# epub_uid = ''

# A list of files that should not be packed into the epub file.
epub_exclude_files = ['search.html']

# -- Extension configuration -------------------------------------------------

# -- Options for intersphinx extension ---------------------------------------

# Example configuration for intersphinx: refer to the Python standard library.
intersphinx_mapping = {'https://docs.python.org/': None}

# -- Options for todo extension ----------------------------------------------

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True
